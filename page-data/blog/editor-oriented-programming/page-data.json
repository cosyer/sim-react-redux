{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/editor-oriented-programming","result":{"data":{"markdownRemark":{"html":"<h1 id=\"未完待续面向编辑器编程\" style=\"position:relative;\"><a href=\"#%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B\" aria-label=\"未完待续面向编辑器编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[未完待续]面向编辑器编程</h1>\n<p>               —— <strong>Typescript 篇</strong></p>\n<h6 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h6>\n<blockquote>\n<p>为什么叫 <code class=\"language-text\">面向编辑器编程</code>，大家可能没听过，<del>因为名字是我自己瞎编的</del>，但是大家可能听过  <code class=\"language-text\">面向对象编程</code>、<code class=\"language-text\">面向过程编程</code> 等等，那么<code class=\"language-text\">面向编辑器编程</code> 是什么意思呢？<code class=\"language-text\">面向 xxx 编程</code>, 其实是一种 <code class=\"language-text\">设计模式(面向对象编程、面向过程编程)</code>、<code class=\"language-text\">编程范式(函数式编程)</code>、<code class=\"language-text\">行为习惯[面向百度/谷歌编程、面向测试编程(手动@我司)]</code> 等等在编程上的体现，所以 <code class=\"language-text\">面向编辑器编程</code> ，顾名思义，就是写出让编辑器认识的代码，并让编辑器辅助我们编写/校验代码。如果我们写出的代码连编辑器都不认识，那么可能在一段时间(<del>第二天</del>)之后，自己写的代码自己都不认识，别的同事接手(<del>接盘</del>)成本也会变大。</p>\n</blockquote>\n<h2 id=\"目录\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%BD%95\" aria-label=\"目录 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录</h2>\n<p>[toc]</p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%A4%A7%E7%BA%B2\">大纲</a></li>\n<li>\n<p><a href=\"#typescript-%E4%BB%8B%E7%BB%8D\"><code class=\"language-text\">Typescript</code> 介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\">1. 基本介绍</a></p>\n<ul>\n<li><a href=\"#11-%E7%AE%80%E4%BB%8B\">1.1 简介</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95\">2. 基础知识&#x26;常见用法</a></p>\n<ul>\n<li>\n<p><a href=\"#21-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">2.1 基础知识</a></p>\n<ul>\n<li><a href=\"#211-typescipt-%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B\">2.1.1 <code class=\"language-text\">Typescipt</code> 中的基础类型</a></li>\n<li><a href=\"#212-typescipt-%E4%B8%AD%E6%8C%87%E6%B4%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95\">2.1.2 <code class=\"language-text\">Typescipt</code> 中指派类型的方法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#22-%E5%B8%B8%E8%A7%81%E5%88%A9%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E7%9A%84%E7%94%A8%E6%B3%95\">2.2 常见利用类型推断的用法</a></p>\n<ul>\n<li><a href=\"#221-%E5%9F%BA%E7%A1%80%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\">2.2.1 基础的类型推断</a></li>\n<li><a href=\"#222-%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E6%8E%A8%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95\">2.2.2 一些其他推断类型的方法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-typescript%E5%86%85%E7%BD%AE%E5%B8%B8%E8%A7%81-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E4%BB%8B%E7%BB%8D\">3. <code class=\"language-text\">Typescript</code>内置常见 <code class=\"language-text\">泛型操作符</code> 介绍</a></li>\n<li>\n<p><a href=\"#4-%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\">4. 如何自己写一个 <code class=\"language-text\">泛型操作符</code></a></p>\n<ul>\n<li>\n<p><a href=\"#41-%E4%BA%86%E8%A7%A3-typescript-%E4%B8%AD%E7%9A%84%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B%E3%80%82\">4.1 了解 <code class=\"language-text\">Typescript</code> 中的高级类型。</a></p>\n<ul>\n<li><a href=\"#411-%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8Bintersection-types\">4.1.1 交叉类型(Intersection Types)</a></li>\n<li><a href=\"#412-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8Bunion-types\">4.1.2 联合类型(Union Types)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#42-%E4%BA%86%E8%A7%A3-typescript-%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%82\">4.2 了解 <code class=\"language-text\">Typescript</code> 中的常见操作类型的关键字。</a></p>\n<ul>\n<li><a href=\"#421-in-%E5%85%B3%E9%94%AE%E5%AD%97\">4.2.1 <code class=\"language-text\">in</code> 关键字</a></li>\n<li><a href=\"#422-keyof-%E5%85%B3%E9%94%AE%E5%AD%97\">4.2.2 <code class=\"language-text\">keyof</code> 关键字</a></li>\n<li><a href=\"#423-extends-%E5%85%B3%E9%94%AE%E5%AD%97\">4.2.3 <code class=\"language-text\">extends</code> 关键字</a></li>\n<li><a href=\"#424-extends-%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0-%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8Bconditional-types\">4.2.4 <code class=\"language-text\">extends</code> 关键字实现 <code class=\"language-text\">条件类型(Conditional Types)</code></a></li>\n<li><a href=\"#425-infer-%E5%85%B3%E9%94%AE%E5%AD%97\">4.2.5 <code class=\"language-text\">infer</code> 关键字</a></li>\n</ul>\n</li>\n<li><a href=\"#43-%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E3%80%82\">4.3 写一个简单的 <code class=\"language-text\">泛型操作符</code>。</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-%E4%B8%80%E4%BA%9B-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E7%9A%84%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E9%AA%9A%E6%93%8D%E4%BD%9C\">5. 一些 <code class=\"language-text\">泛型操作符</code> 的高级写法(<del>骚操作</del>)</a></p>\n<ul>\n<li><a href=\"#51-%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC\">5.1 更高级的 <code class=\"language-text\">泛型操作符</code> 的使用场景与价值</a></li>\n<li><a href=\"#52-%E6%B5%85%E6%9E%90%E5%B8%B8%E8%A7%81%E7%AE%80%E5%8D%95%E5%86%99%E6%B3%95%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\">5.2 浅析常见简单写法(官方提供的泛型操作符)</a></li>\n<li><a href=\"#53-%E4%B8%80%E4%BA%9B%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\">5.3 一些高级写法与原理解析</a></li>\n<li><a href=\"#54-%E4%BD%BF%E7%94%A8%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\">5.4 使用高级写法实现功能更加复杂的泛型操作符</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%86%99%E5%87%BA%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%A9%E7%BC%96%E8%BE%91%E5%99%A8-%E8%AE%A4%E8%AF%86-%E7%9A%84%E4%BB%A3%E7%A0%81\">写出编辑器让编辑器 \"认识\" 的代码</a></p>\n<ul>\n<li><a href=\"#1-%E5%86%99-typescript-%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8E%9F%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7\">1. 写 <code class=\"language-text\">Typescript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</a></li>\n<li><a href=\"#2-%E5%86%99-javascript-%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8E%9F%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7\">2. 写 <code class=\"language-text\">Javascript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#qa\"><strong>Q&#x26;A</strong></a></p>\n<ul>\n<li><a href=\"#1-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B-%E7%9A%84%E4%BC%98%E5%8A%BF%E5%9C%A8%E5%93%AA%E9%87%8C\">1. <code class=\"language-text\">面向编辑器编程</code> 的优势在哪里</a></li>\n<li><a href=\"#2-%E5%A6%82%E4%BD%95%E5%B9%B3%E7%A8%B3%E5%9C%B0%E6%8E%A5%E5%85%A5-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B\">2. 如何平稳地接入 <code class=\"language-text\">面向编辑器编程</code></a></li>\n<li><a href=\"#3-%E7%9C%9F%E7%9A%84%E4%B8%80%E5%AE%9A%E8%A6%81%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%83%BD%E5%BF%85%E9%A1%BB%E8%A6%81%E6%9C%89%E5%AE%8C%E5%96%84%E7%9A%84%E6%8F%90%E7%A4%BA%E5%90%97\">3. 真的一定要每一行代码都必须要有完善的提示吗</a></li>\n<li><a href=\"#4-%E5%93%AA%E4%BA%9B%E5%9C%BA%E6%99%AF%E9%80%82%E5%90%88-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B\">4. 哪些场景适合 <code class=\"language-text\">面向编辑器编程</code></a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%80%90%E4%BC%B8%E6%89%8B%E5%85%9A%E7%A6%8F%E5%88%A9%E3%80%91%E5%B8%B8%E7%94%A8%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%B1%87%E6%80%BB\">【伸手党福利】常用泛型操作符汇总</a></li>\n</ul>\n</div>\n<h2 id=\"大纲\" style=\"position:relative;\"><a href=\"#%E5%A4%A7%E7%BA%B2\" aria-label=\"大纲 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>大纲</h2>\n<ol>\n<li>\n<p><code class=\"language-text\">Typescript</code> 介绍</p>\n<ol>\n<li>基本介绍</li>\n<li>基础知识&#x26;常见利用类型推断的用法</li>\n<li><code class=\"language-text\">Typescript</code>内置常见 <code class=\"language-text\">泛型操作符</code> 介绍</li>\n<li>如何自己写一个<code class=\"language-text\">泛型操作符</code></li>\n<li>一些 <code class=\"language-text\">泛型操作符</code> 的高级写法</li>\n</ol>\n</li>\n<li>\n<p>写出编辑器让编辑器 \"认识\" 的代码</p>\n<ol>\n<li>写 <code class=\"language-text\">Typescript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</li>\n<li>写 <code class=\"language-text\">Javascript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</li>\n</ol>\n</li>\n<li>\n<p><strong>Q&#x26;A</strong></p>\n<ol>\n<li><code class=\"language-text\">面向编辑器编程</code> 的优势在哪里</li>\n<li>如何平稳地接入 <code class=\"language-text\">面向编辑器编程</code></li>\n<li>真的一定要每一行代码都必须要有完善的提示吗</li>\n<li>哪些场景适合 <code class=\"language-text\">面向编辑器编程</code></li>\n</ol>\n</li>\n<li>【伸手党福利】常用泛型操作符汇总</li>\n</ol>\n<h2 id=\"typescript-介绍\" style=\"position:relative;\"><a href=\"#typescript-%E4%BB%8B%E7%BB%8D\" aria-label=\"typescript 介绍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Typescript</code> 介绍</h2>\n<h3 id=\"1-基本介绍\" style=\"position:relative;\"><a href=\"#1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\" aria-label=\"1 基本介绍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 基本介绍</h3>\n<h4 id=\"11-简介\" style=\"position:relative;\"><a href=\"#11-%E7%AE%80%E4%BB%8B\" aria-label=\"11 简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 简介</h4>\n<p> <code class=\"language-text\">Typescript</code> 是 <code class=\"language-text\">Javascript</code> 的超集，意味着 <code class=\"language-text\">Javascript</code> 本身的语法在 <code class=\"language-text\">Typescript</code> 里面也能跑的通。<code class=\"language-text\">Typescript</code>一方面是对 <code class=\"language-text\">Javascript</code> 加上了很多条条框框的限制，另一方面是拓展了 <code class=\"language-text\">Javascript</code> 的一些能力，就像 <code class=\"language-text\">es6</code> 提供了那么多神奇的语法糖一样。只要按照一定的规则去书写<code class=\"language-text\">Javascript</code> ，就能享受到 <code class=\"language-text\">Typescript</code> 带来的好处。</p>\n<h3 id=\"2-基础知识常见用法\" style=\"position:relative;\"><a href=\"#2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95\" aria-label=\"2 基础知识常见用法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 基础知识&#x26;常见用法</h3>\n<h4 id=\"21-基础知识\" style=\"position:relative;\"><a href=\"#21-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\" aria-label=\"21 基础知识 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 基础知识</h4>\n<h5 id=\"211-typescipt-中的基础类型\" style=\"position:relative;\"><a href=\"#211-typescipt-%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B\" aria-label=\"211 typescipt 中的基础类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.1 <code class=\"language-text\">Typescipt</code> 中的基础类型</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** string 类型 */</span>\n<span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** number 类型 */</span>\n<span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** boolean 类型 */</span>\n<span class=\"token keyword\">const</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** Array 类型 */</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 元组 类型 */</span>\n<span class=\"token keyword\">const</span> tuple<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 枚举 类型 */</span>\n<span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Green<span class=\"token punctuation\">,</span>\n    Blue\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** Any 类型 */</span>\n<span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** Void 类型 某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">warnUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my warning message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** Null 和 Undefined 类型 */</span>\n<span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** Never 类型，never类型表示的是那些永不存在的值的类型，never类型是任何类型的子类型，也可以赋值给任何类型*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** Object 类型 表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。 */</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"212-typescipt-中指派类型的方法\" style=\"position:relative;\"><a href=\"#212-typescipt-%E4%B8%AD%E6%8C%87%E6%B4%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95\" aria-label=\"212 typescipt 中指派类型的方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.2 <code class=\"language-text\">Typescipt</code> 中指派类型的方法</h5>\n<h6 id=\"类型断言\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\" aria-label=\"类型断言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型断言</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 使用尖括号方式 `尖括号` */</span>\n<span class=\"token keyword\">const</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 使用 `as` 语法 */</span>\n<span class=\"token keyword\">const</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Tips</strong>:  当你在<code class=\"language-text\">Typescript</code> 里使用 <code class=\"language-text\">JSX</code> 时，只有 <code class=\"language-text\">as</code> 语法断言是被允许的。</p>\n</blockquote>\n<h6 id=\"类型赋值\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E8%B5%8B%E5%80%BC\" aria-label=\"类型赋值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型赋值</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"类型推断\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\" aria-label=\"类型推断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型推断</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 此时 num 被自动推断为 number 类型 */</span>\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Notes</strong>： 以上的权重依次递减，即：<code class=\"language-text\">类型断言</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">\\gt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span></span></span></span> <code class=\"language-text\">类型赋值</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\ge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span> <code class=\"language-text\">类型推断</code>，所以当类型推断存在偏差时，可以使用 <code class=\"language-text\">类型断言</code> 来纠正 <code class=\"language-text\">类型推断</code>，反之则不行。</p>\n</blockquote>\n<h4 id=\"22-常见利用类型推断的用法\" style=\"position:relative;\"><a href=\"#22-%E5%B8%B8%E8%A7%81%E5%88%A9%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E7%9A%84%E7%94%A8%E6%B3%95\" aria-label=\"22 常见利用类型推断的用法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 常见利用类型推断的用法</h4>\n<h5 id=\"221-基础的类型推断\" style=\"position:relative;\"><a href=\"#221-%E5%9F%BA%E7%A1%80%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\" aria-label=\"221 基础的类型推断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 基础的类型推断</h5>\n<h6 id=\"基本方式\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%96%B9%E5%BC%8F\" aria-label=\"基本方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本方式</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 此时 num 的类型为 number */</span>\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 此时 str 的类型为 string */</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"基础类型推断这种方式也被称为类型保护\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%B9%9F%E8%A2%AB%E7%A7%B0%E4%B8%BA%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4\" aria-label=\"基础类型推断这种方式也被称为类型保护 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基础类型推断(这种方式也被称为类型保护)</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 使用 typeof、instanceof 推断类型 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/* 在这个块中，TypeScript 知道 `val` 的类型必须是 `string` */</span>\n    \t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/** 无法保证 `val` 是 `string` 类型 */</span>\n  \tval<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 在这个块中，TypeScript 知道 `val` 的类型必须是 `string` */</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/** 无法保证 `val` 是 `string` 类型 */</span>\n    val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 使用 in 操作符 推断类型 */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  \ta<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  \tb<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span> <span class=\"token keyword\">in</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/** 此时 val 类型为 A */</span>\n  \t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/** 此时 val 类型为 B */</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 使用 字面量类型 推断类型 */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  \tpropName<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  \tpropName<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>propName <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/** 此时 val 类型为 A */</span>\n  \t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/** 此时 val 类型为 B */</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h6 id=\"类型可以被传递\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BC%A0%E9%80%92\" aria-label=\"类型可以被传递 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型可以被传递</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 推断函数返回为一个 number 类型 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 这里同样可以推断函数返回为一个 number 类型 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Tips</strong>: 在类型传递时遇到 <code class=\"language-text\">any</code>, 会直接被同化成 <code class=\"language-text\">any</code>, 这里需要小心使用</p>\n</blockquote>\n<h5 id=\"222-一些其他推断类型的方法\" style=\"position:relative;\"><a href=\"#222-%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E6%8E%A8%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95\" aria-label=\"222 一些其他推断类型的方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.2 一些其他推断类型的方法</h5>\n<h6 id=\"解构\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%9E%84\" aria-label=\"解构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解构</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">456</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 这里可以准确地得到\n * a 的类型为 string\n * rest 的类型为 { b: number } 所以解构也可以当作 Omit 泛型操作符使用，缺点是可能造成无用变量的冗余\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"自定义类型推断的规则\" style=\"position:relative;\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E7%9A%84%E8%A7%84%E5%88%99\" aria-label=\"自定义类型推断的规则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义类型推断的规则</h6>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkIsDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> val <span class=\"token keyword\">is</span> <span class=\"token string\">'dog'</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkIsDog</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/** 这里 TypeScript 可以得到 val 的准确的类型为 'dog' */</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-typescript内置常见-泛型操作符-介绍\" style=\"position:relative;\"><a href=\"#3-typescript%E5%86%85%E7%BD%AE%E5%B8%B8%E8%A7%81-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E4%BB%8B%E7%BB%8D\" aria-label=\"3 typescript内置常见 泛型操作符 介绍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">Typescript</code>内置常见 <code class=\"language-text\">泛型操作符</code> 介绍</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 把传入的类型全部转换为 可选类型 */</span>\n<span class=\"token keyword\">type</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 把传入的类型全部转换为 必填类型 */</span>\n<span class=\"token keyword\">type</span> Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 把传入的类型全部转换为 只读类型 */</span>\n<span class=\"token keyword\">type</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 从传入的 K 中取出 T 中的类型 */</span>\n<span class=\"token keyword\">type</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 创建一个以 K 为 key， T 为 value 的类型 */</span>\n<span class=\"token keyword\">type</span> Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 从 T 中排除掉 U 的类型 */</span>\n<span class=\"token keyword\">type</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/** 从 T 中提取 U 所包含的类型 */</span>\n<span class=\"token keyword\">type</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 从 T 中忽略掉 K 为 key 的属性 */</span>\n<span class=\"token keyword\">type</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 从 T 排除掉所有的 null 或 undefined 类型 */</span>\n<span class=\"token keyword\">type</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 把函数的入参类型以元组类型取出 */</span>\n<span class=\"token keyword\">type</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> infer <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 把构造函数的入参类型以元组类型取出 */</span>\n<span class=\"token keyword\">type</span> ConstructorParameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">new</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">new</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> infer <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 把函数的返回值类型取出 */</span>\n<span class=\"token keyword\">type</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 取出构造函数的实例类型 */</span>\n<span class=\"token keyword\">type</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">new</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">new</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"4-如何自己写一个-泛型操作符\" style=\"position:relative;\"><a href=\"#4-%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\" aria-label=\"4 如何自己写一个 泛型操作符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 如何自己写一个 <code class=\"language-text\">泛型操作符</code></h3>\n<h4 id=\"41-了解-typescript-中的高级类型。\" style=\"position:relative;\"><a href=\"#41-%E4%BA%86%E8%A7%A3-typescript-%E4%B8%AD%E7%9A%84%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B%E3%80%82\" aria-label=\"41 了解 typescript 中的高级类型。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 了解 <code class=\"language-text\">Typescript</code> 中的高级类型。</h4>\n<blockquote>\n<p><code class=\"language-text\">Typescript</code> 中类型分为 <code class=\"language-text\">基础类型</code>  和 <code class=\"language-text\">高级类型</code>, <code class=\"language-text\">基础类型</code> 在上面的第二章中已经有较为详细的描述, 这里不做过多的赘述，这一小节主要讨论一下 <code class=\"language-text\">Typescript</code> 中的 <code class=\"language-text\">高级类型</code> 。所谓 <code class=\"language-text\">高级类型</code> 并不是字面意义上的非常牛X的特殊类型 (<del>就好像 <code class=\"language-text\">Rx</code> 中的高阶流, 也并不是那种超出次元壁的非常非常高级的流, 其实它也只是一个普通流, 只不过这个流每一次发送出来的数据本身也是一个流, 仅此而已 <strong>: )</strong></del>), 它也只是由基础类型通过一些逻辑运算符组合起来的类型而已。<code class=\"language-text\">高级类型</code> 官方文档的分类有很多, 比如 <code class=\"language-text\">交叉类型(Intersection Types)</code>、<code class=\"language-text\">联合类型(Union Types)</code> 、<code class=\"language-text\">类型保护与区分类型 (Type Guards and Differentiating Types)</code>、<code class=\"language-text\">可辨识联合(Discriminated Unions)</code> 等等。这里我们只讨论最据操作性的两种 -- <code class=\"language-text\">交叉类型(Intersection Types)</code> 和 <code class=\"language-text\">联合类型(Union Types)</code>, 这两种类型怎么理解呢, 我个人理解可以把它理解成集合, 但又有点区别, 可以理解成有逻辑关系的集合。</p>\n</blockquote>\n<h5 id=\"411-交叉类型intersection-types\" style=\"position:relative;\"><a href=\"#411-%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8Bintersection-types\" aria-label=\"411 交叉类型intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1.1 交叉类型(Intersection Types)</h5>\n<p><code class=\"language-text\">交叉类型</code> 怎么理解呢？我个人理解你可以把她当作是并集, 或者你可以当成 <code class=\"language-text\">既又</code>。 比如 <code class=\"language-text\">A &amp; B</code> 可以当成 A <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∪</span></span></span></span> B, 或者你可以理解为这个类型既是  A 又是 B。在平时开发代码的过程中, 如果你想把几个不同类型的属性拼凑到一起, 那么这个操作符是你的首选。</p>\n<h5 id=\"412-联合类型union-types\" style=\"position:relative;\"><a href=\"#412-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8Bunion-types\" aria-label=\"412 联合类型union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1.2 联合类型(Union Types)</h5>\n<p><code class=\"language-text\">联合类型</code> 怎么理解呢？我个人理解你可以把它理解为提供了一个选择范围。或者说他是多个类型的集合, 通俗一点讲, 你甚至可以把它理解为一个数组, 数组的每一项就是一个类型。</p>\n<blockquote>\n<p><strong>Tips</strong>: 把 <code class=\"language-text\">联合类型</code> 理解为一个数组这很重要, 否则你可能无法理解后面章节中提到的泛型操作符的一些常见写法。</p>\n</blockquote>\n<h4 id=\"42-了解-typescript-中的常见操作类型的关键字。\" style=\"position:relative;\"><a href=\"#42-%E4%BA%86%E8%A7%A3-typescript-%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%82\" aria-label=\"42 了解 typescript 中的常见操作类型的关键字。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 了解 <code class=\"language-text\">Typescript</code> 中的常见操作类型的关键字。</h4>\n<blockquote>\n<p><code class=\"language-text\">Typescript</code> 中有很多可以操作类型的关键字, 它们有各自的用途。例如 <code class=\"language-text\">in</code> 可以用来遍历 <code class=\"language-text\">联合类型</code> (就像在 <code class=\"language-text\">Javascript</code> 中使用 <code class=\"language-text\">for in</code> 来遍历数组一样); <code class=\"language-text\">keyof</code>可以提取出 <code class=\"language-text\">字典类型(Mapped Types)</code> 中的键; <code class=\"language-text\">extends</code> 可以用来约束泛型, <code class=\"language-text\">extends</code> 还可以用在 <code class=\"language-text\">条件类型(Conditional Types)</code> 中做条件判断(类似于 <code class=\"language-text\">Javascript</code> 中的三元运算符); <code class=\"language-text\">infer</code> 可以当作占位符, 配合 <code class=\"language-text\">条件类型</code> 可以提取出一些特定位置类型等等。</p>\n</blockquote>\n<h5 id=\"421-in-关键字\" style=\"position:relative;\"><a href=\"#421-in-%E5%85%B3%E9%94%AE%E5%AD%97\" aria-label=\"421 in 关键字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2.1 <code class=\"language-text\">in</code> 关键字</h5>\n<p><code class=\"language-text\">in</code> 关键字的功能和 <code class=\"language-text\">Javascript</code> 中的 <code class=\"language-text\">in</code> 关键字很像, 可以用来循环遍历 <code class=\"language-text\">联合类型</code>, 这个操作符很重要, 比如我们在 <strong>第3节</strong> 中讲到的一些官方自带的泛型操作符的实现原理就很容易理解了, 像 <code class=\"language-text\">Partial</code> 、<code class=\"language-text\">Required</code> 、<code class=\"language-text\">Readonly</code> 这些, 核心都是使用的 <code class=\"language-text\">in</code> 关键字来遍历类型并附加一些特殊的操作来实现不同的效果。</p>\n<h5 id=\"422-keyof-关键字\" style=\"position:relative;\"><a href=\"#422-keyof-%E5%85%B3%E9%94%AE%E5%AD%97\" aria-label=\"422 keyof 关键字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2.2 <code class=\"language-text\">keyof</code> 关键字</h5>\n<p><code class=\"language-text\">keyof</code> 关键字, 从字面意思就很容易理解了, 它可以很容易地提取出 <code class=\"language-text\">字典类型(Mapped Types)</code>(你也可以翻译成 <code class=\"language-text\">映射类型</code>, 其实我更热衷于翻译为 <code class=\"language-text\">键值对类型</code> 哈哈 <strong>: )</strong>) 的 <code class=\"language-text\">key</code>, 并以 <code class=\"language-text\">联合类型</code> 的方式返回。如果不是很好理解的话, 你可以把 <code class=\"language-text\">字典类型</code> 类型理解为 <code class=\"language-text\">Javascript</code>  中的 <strong>对象</strong>, 使用 <code class=\"language-text\">keyof</code> 操作 <code class=\"language-text\">字典类型</code>, 可以理解为在 <code class=\"language-text\">Javascript</code> 中使用 <code class=\"language-text\">Object.keys</code> 方法操作一个<strong>对象</strong>, 得到的返回值就是一个由<strong>对象</strong>的 <code class=\"language-text\">key</code> 组成的数组。</p>\n<blockquote>\n<p><strong>Tips</strong>: 这里一定要明确的是, 使用 <code class=\"language-text\">keyof</code> 关键字操作 <code class=\"language-text\">字典类型</code>, 返回的是一个由 <code class=\"language-text\">key</code> 组成的 <code class=\"language-text\">联合类型</code>(数组! 数组! 数组!), 否则在下面的章节中, 你将无法理解一些泛型操作符的核心原理。</p>\n</blockquote>\n<h5 id=\"423-extends-关键字\" style=\"position:relative;\"><a href=\"#423-extends-%E5%85%B3%E9%94%AE%E5%AD%97\" aria-label=\"423 extends 关键字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2.3 <code class=\"language-text\">extends</code> 关键字</h5>\n<p><code class=\"language-text\">extends</code> 关键字, 从字面上来看, 很像常见的 <code class=\"language-text\">oop</code> 语言中的 <code class=\"language-text\">extends</code> 关键字。当你在定义一个 <code class=\"language-text\">interface</code> 的时候, 如果使用 <code class=\"language-text\">extends</code> 关键字, 也确实可以从另一个 <code class=\"language-text\">interface</code> 中继承属性类型定义(实际开发中也推荐这么写, 这有利于代码的复用)。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 这里就不需要为 Dog 重复定义 eat sleep</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是如果在泛型中使用 <code class=\"language-text\">extends</code> 关键字, 其表现更像是 <code class=\"language-text\">implements</code>, 主要起到约束作用。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这里通过 `extends` 来约束传入的宠物狗的类型, 你可以把 柯基、二哈 当成 宠物狗，但你不能把 蓝猫 当作宠物狗</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Dog</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  petDog<span class=\"token operator\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Tips</strong>: 这里理解 <code class=\"language-text\">extends</code> 关键字起约束作用远比起继承作用要重要的多(虽然实际开发中用作继承的场景更加常见<strong>: )</strong>), 尤其是想要自定义一个泛型操作符的时候, 这可以校验泛型入参也可以做类型收敛。</p>\n</blockquote>\n<h5 id=\"424-extends-关键字实现-条件类型conditional-types\" style=\"position:relative;\"><a href=\"#424-extends-%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0-%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8Bconditional-types\" aria-label=\"424 extends 关键字实现 条件类型conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2.4 <code class=\"language-text\">extends</code> 关键字实现 <code class=\"language-text\">条件类型(Conditional Types)</code></h5>\n<p><code class=\"language-text\">条件类型(Conditional Types)</code> 官方的示例这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">X</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Y</span></code></pre></div>\n<p>这里的 <code class=\"language-text\">T</code>、<code class=\"language-text\">U</code>、<code class=\"language-text\">X</code>、<code class=\"language-text\">Y</code> 都可以是不同的类型, 这里的表达式怎么理解呢? 其实你可以类比成 <code class=\"language-text\">Javascript</code> 中的 <code class=\"language-text\">三元表达式</code>, 前面的 <code class=\"language-text\">T extends U</code> 是判断条件, 后面的 <code class=\"language-text\">X : Y</code> 是根据前面的判断条件返回的值, 如果是条件成立, 那么返回  <code class=\"language-text\">X</code>, 如果不成立, 那么返回 <code class=\"language-text\">Y</code>。在 <code class=\"language-text\">泛型操作符</code> 中百分之八十的骚操作都是依靠 <code class=\"language-text\">条件类型</code> 来实现的, 所以这里的逻辑关系一定要好好理解。</p>\n<h5 id=\"425-infer-关键字\" style=\"position:relative;\"><a href=\"#425-infer-%E5%85%B3%E9%94%AE%E5%AD%97\" aria-label=\"425 infer 关键字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2.5 <code class=\"language-text\">infer</code> 关键字</h5>\n<p><code class=\"language-text\">infer</code> 关键字, 常常与 <code class=\"language-text\">条件类型(Conditional Types)</code> 一起使用, 官方文档上表达的意思是 <code class=\"language-text\">推断类型变量(inferred type)</code> 可以在条件成立时, 作为判断条件的任意位置的类型的引用(<del>英文不好，大家凑活看吧<strong>: )</strong></del>)。换成大白话什么意思呢? 就是说你可以在判断条件中的任意位置使用 <code class=\"language-text\">infer</code> 来声明一个变量 <code class=\"language-text\">占位符</code>, 这个 <code class=\"language-text\">占位符</code> 在条件判断为真的时候, 拿到所占位置的类型引用, 方便你做后续的操作。</p>\n<h4 id=\"43-写一个简单的-泛型操作符。\" style=\"position:relative;\"><a href=\"#43-%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E3%80%82\" aria-label=\"43 写一个简单的 泛型操作符。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 写一个简单的 <code class=\"language-text\">泛型操作符</code>。</h4>\n<blockquote>\n<p>有了上面的基础知识铺垫之后, 我们就可以写一些非常简单而且实用的泛型操作符啦！</p>\n</blockquote>\n<p>比如，你可以使用 <code class=\"language-text\">infer</code> 配合 <code class=\"language-text\">条件类型</code> 来实现一个取出数组泛型的 <code class=\"language-text\">泛型操作符</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> GetArrayGenerics<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">G</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">G</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 让我们测试一下</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> GetArrayGenerics<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> GetArrayGenerics<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number</span></code></pre></div>\n<p>像上面这样, 我们就可以快速地定义一个最简单的 <code class=\"language-text\">泛型操作符</code>。如果上面的章节没仔细看的同学, 可能看到这里就会很懵, 没关系, 让我来仔细看看这个简单的 <code class=\"language-text\">泛型操作符</code>。首先这个 <code class=\"language-text\">泛型操作符</code> 本质上就是一个 <code class=\"language-text\">条件类型</code>, 我们先来看它的判断条件部分, 传入的泛型 <code class=\"language-text\">A</code> 如果满足 <code class=\"language-text\">Array&lt;infer G&gt;</code> 这个类型结构的话, 使用 <code class=\"language-text\">infer</code> 定义一个占位符 <code class=\"language-text\">G</code>, 作为数组泛型的类型引用, 并把该引用返回, 如果不成立则返回一个 <code class=\"language-text\">never</code> 类型(如果不清楚 <code class=\"language-text\">never</code> 类型的同学可以翻看<strong>第二章</strong>中的基础类型介绍)。那么如果你传入的是一个带泛型的数组类型, 你就可以得到它的泛型类型。</p>\n<blockquote>\n<p> 看到这里可能有的同学要问了, 我都已经明确知道并且定义数组的泛型是什么了, 我还用泛型操作符拿出有什么用呢? 我直接写不就好了吗? 这个问题问的很好, 首先如果这个类型依赖于数组的泛型, 那么重复定义显然不符合代码复用原则。其次如果数组的泛型有改动, 下面依赖的类型也需要跟着改动, 有维护过维护老代码经历的同学肯定知道(<del>你说的这个同学是不是你自己呀?</del>), 老代码(<del>万年屎山</del>)能不动, 尽量不要动, 鬼知道动一行, 会出现多少未知的 <code class=\"language-text\">bug</code>, 更何况动一片代码, 想想都觉得后怕; 再其次不是所有的场景下, 我们都是清楚地知道一个数组的泛型是什么, 有些场景下比如传参的类型不同, 返回值也会跟着变化(这种场景在封装一些通用的工具函数或者类库的时候非常常见), 你可能就需要使用泛型操作符来帮助你做类型推断。所以尝试自己写泛型操作符还是非常有必要的啦。</p>\n</blockquote>\n<h3 id=\"5-一些-泛型操作符-的高级写法骚操作\" style=\"position:relative;\"><a href=\"#5-%E4%B8%80%E4%BA%9B-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E7%9A%84%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E9%AA%9A%E6%93%8D%E4%BD%9C\" aria-label=\"5 一些 泛型操作符 的高级写法骚操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 一些 <code class=\"language-text\">泛型操作符</code> 的高级写法(<del>骚操作</del>)</h3>\n<h4 id=\"51-更高级的-泛型操作符-的使用场景与价值\" style=\"position:relative;\"><a href=\"#51-%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84-%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC\" aria-label=\"51 更高级的 泛型操作符 的使用场景与价值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 更高级的 <code class=\"language-text\">泛型操作符</code> 的使用场景与价值</h4>\n<h4 id=\"52-浅析常见简单写法官方提供的泛型操作符\" style=\"position:relative;\"><a href=\"#52-%E6%B5%85%E6%9E%90%E5%B8%B8%E8%A7%81%E7%AE%80%E5%8D%95%E5%86%99%E6%B3%95%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\" aria-label=\"52 浅析常见简单写法官方提供的泛型操作符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 浅析常见简单写法(官方提供的泛型操作符)</h4>\n<h4 id=\"53-一些高级写法与原理解析\" style=\"position:relative;\"><a href=\"#53-%E4%B8%80%E4%BA%9B%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\" aria-label=\"53 一些高级写法与原理解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 一些高级写法与原理解析</h4>\n<h4 id=\"54-使用高级写法实现功能更加复杂的泛型操作符\" style=\"position:relative;\"><a href=\"#54-%E4%BD%BF%E7%94%A8%E9%AB%98%E7%BA%A7%E5%86%99%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6\" aria-label=\"54 使用高级写法实现功能更加复杂的泛型操作符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 使用高级写法实现功能更加复杂的泛型操作符</h4>\n<h2 id=\"写出编辑器让编辑器-认识-的代码\" style=\"position:relative;\"><a href=\"#%E5%86%99%E5%87%BA%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%A9%E7%BC%96%E8%BE%91%E5%99%A8-%E8%AE%A4%E8%AF%86-%E7%9A%84%E4%BB%A3%E7%A0%81\" aria-label=\"写出编辑器让编辑器 认识 的代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写出编辑器让编辑器 \"认识\" 的代码</h2>\n<h3 id=\"1-写-typescript-代码时的一些注意事项原则小技巧\" style=\"position:relative;\"><a href=\"#1-%E5%86%99-typescript-%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8E%9F%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7\" aria-label=\"1 写 typescript 代码时的一些注意事项原则小技巧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 写 <code class=\"language-text\">Typescript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</h3>\n<h3 id=\"2-写-javascript-代码时的一些注意事项原则小技巧\" style=\"position:relative;\"><a href=\"#2-%E5%86%99-javascript-%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8E%9F%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7\" aria-label=\"2 写 javascript 代码时的一些注意事项原则小技巧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 写 <code class=\"language-text\">Javascript</code> 代码时的一些注意事项&#x26;原则&#x26;小技巧</h3>\n<h2 id=\"qa\" style=\"position:relative;\"><a href=\"#qa\" aria-label=\"qa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Q&#x26;A</strong></h2>\n<h3 id=\"1-面向编辑器编程-的优势在哪里\" style=\"position:relative;\"><a href=\"#1-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B-%E7%9A%84%E4%BC%98%E5%8A%BF%E5%9C%A8%E5%93%AA%E9%87%8C\" aria-label=\"1 面向编辑器编程 的优势在哪里 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">面向编辑器编程</code> 的优势在哪里</h3>\n<h3 id=\"2-如何平稳地接入-面向编辑器编程\" style=\"position:relative;\"><a href=\"#2-%E5%A6%82%E4%BD%95%E5%B9%B3%E7%A8%B3%E5%9C%B0%E6%8E%A5%E5%85%A5-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B\" aria-label=\"2 如何平稳地接入 面向编辑器编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 如何平稳地接入 <code class=\"language-text\">面向编辑器编程</code></h3>\n<h3 id=\"3-真的一定要每一行代码都必须要有完善的提示吗\" style=\"position:relative;\"><a href=\"#3-%E7%9C%9F%E7%9A%84%E4%B8%80%E5%AE%9A%E8%A6%81%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%83%BD%E5%BF%85%E9%A1%BB%E8%A6%81%E6%9C%89%E5%AE%8C%E5%96%84%E7%9A%84%E6%8F%90%E7%A4%BA%E5%90%97\" aria-label=\"3 真的一定要每一行代码都必须要有完善的提示吗 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 真的一定要每一行代码都必须要有完善的提示吗</h3>\n<h3 id=\"4-哪些场景适合-面向编辑器编程\" style=\"position:relative;\"><a href=\"#4-%E5%93%AA%E4%BA%9B%E5%9C%BA%E6%99%AF%E9%80%82%E5%90%88-%E9%9D%A2%E5%90%91%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E7%A8%8B\" aria-label=\"4 哪些场景适合 面向编辑器编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 哪些场景适合 <code class=\"language-text\">面向编辑器编程</code></h3>\n<h2 id=\"【伸手党福利】常用泛型操作符汇总\" style=\"position:relative;\"><a href=\"#%E3%80%90%E4%BC%B8%E6%89%8B%E5%85%9A%E7%A6%8F%E5%88%A9%E3%80%91%E5%B8%B8%E7%94%A8%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%B1%87%E6%80%BB\" aria-label=\"【伸手党福利】常用泛型操作符汇总 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>【伸手党福利】常用泛型操作符汇总</h2>","frontmatter":{"publishDate":"2020-01-11T00:00:00.000Z","path":"/blog/editor-oriented-programming","title":"[未完待续]如何面向编辑器编程？"}}},"pageContext":{}}}